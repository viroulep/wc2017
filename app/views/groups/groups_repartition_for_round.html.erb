<%= render 'nav', active_event: @event.id do %>
  <h1>Editing groups for <%= @round.name %></h1>
  <p>
  <a href="#" onclick="$('.collapse').collapse('show');">Expand all</a>
  | <a href="#" onclick="$('.collapse').collapse('hide');">Collapse all</a>
  </p>
  <p>
  Sort by : <%= link_to "Name", "#", onclick: "sortByPB()" %>
  </p>
  <% if @round.r_id != 1 %>
    <%= alert(:info, "This is not the first round of an event, you won't be able to add competitors there", note: false) %>
  <% end %>
  <div class="row">
    <div class="col-xs-6 col-md-3">
      <div class="panel panel-default">
        <div class="panel-heading">
          <h3 class="panel-title">
            Competitors without groups
          </h3>
        </div>
        <div id="without-group" class="list-people list-group" data-group="0">
          <%= render "registrations_as_list", registrations: @all_without_group, event_id: @round.event_id %>
        </div>
      </div>
    </div>
    <div class="col-xs-6 col-md-9">
      <div class="row row-all-existing-groups">
        <% @groups.sort.each do |g| %>
          <%= render 'existing_group_panel', group: g %>
          <div class="may-clearfix"></div>
        <% end %>
      </div>
    </div>
  </div>
  <script>
var drake = dragula($(".list-people").toArray(), {
  removeOnSpill: true,
});
let removeGroupForRegistration = function(registration, revertFunc) {
  $.ajax({
    url: `<%= drop_group_for_round_path(@round.id) %>/${registration}`,
    type: 'PATCH',
  }).fail(function () {
    alert("Failed to remove the competitor from the group :(");
    revertFunc();
    return false;
  });
  return true;
};

drake.on('remove', function(el, container, source) {
  // override removeonspill by adding it back to the 'without-group' div
  let $el = $(el);
  $el.removeClass("gu-hide");
  let $prev = $(container);
  let cancelled = false;
  if ($prev.data("group") != "0") {
    let revert = function() {
      $prev.append($el);
    };
    cancelled = !removeGroupForRegistration($el.data("registration"), revert);
  }
  if (!cancelled) {
    $("#without-group").append($el);
  }
}).on('drop', function(el, target, source, sibling) {
  let $el = $(el);
  let $target = $(target);
  let $source = $(source);
  let to = $target.data("group");
  let from = $source.data("group");
  let registration_id = $el.data("registration");
  if (to == from) {
    return;
  } else if (to == "0") {
    let revert = function() {
      $source.append($el);
    };
    removeGroupForRegistration(registration_id, revert);
  } else {
    $.ajax({
      url: `<%= move_to_group_path(@round.id) %>/${to}/${registration_id}`,
      type: 'PATCH',
    }).fail(function () {
      alert("Failed to remove the competitor from the group :(");
      $source.append($el);
    });
  }
})
// TODO: sort by X
sortByPB = function () {
  $(".list-people").each(function (index, element) {
    let titi = $(this).children().sort(function (lhs, rhs) {
      let = pbLhs = $(lhs).data("pb");
      let = pbRhs = $(rhs).data("pb");
      if (pbLhs === undefined && pbRhs === undefined)
        return 0;
      else if (pbLhs === undefined)
        return 1;
      else if (pbRhs === undefined)
        return -1;
      else {
        if (pbLhs < pbRhs)
          return -1;
        else if (pbLhs > pbRhs)
          return 1;
        else
          return 0;
      }
    }).detach().appendTo($(this));
    console.log(titi);
  });
}
  </script>
<% end %>
