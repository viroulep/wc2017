<%= render 'nav', active_event: @event.id do %>
  <h1>Editing groups for <%= @round.name %></h1>
  <p>
  <a href="#" onclick="$('.collapse').collapse('show');">Expand all</a>
  | <a href="#" onclick="$('.collapse').collapse('hide');">Collapse all</a>
  </p>
  <p>
  Sort by : <%= link_to "Name", "#", id: "sort_name_link", class: "icon-after alpha_asc" %>, <%= link_to "Psychsheet", "#", id: "sort_pb_link", class: "icon-after num_desc" %>
  </p>
  <p>
  Each group has two actions to add groups of competitors to them:
  </p>
  <ul>
    <li><%= icon("toggle-up") %>: add the top N people to the group</li>
    <li><%= icon("toggle-down") %>: add the bottom N people to the group</li>
  </ul>
  <p class="form-inline">
  Where N is <%= number_field_tag("N", 20, min: 1, class: "form-control inline-integer", id: "batch-size") %>.
  </p>
  <p class="form-inline">
  Complementarily, you can <%= link_to("automatically fill", "#", onclick: "autoFill()") %> the groups up to
  <%= number_field_tag("N", 20, min: 1, class: "form-control inline-integer", id: "group-size") %>
  competitors.
  <br/>
  The groups will be filled from last to first, taking the top of the unassigned competitors list, as it is currently sorted.
  </p>
  <% if @round.r_id != 1 %>
    <%= alert(:info, "This is not the first round of an event, you won't be able to add competitors there", note: false) %>
  <% end %>
  <div class="row">
    <div class="col-xs-6 col-md-3">
      <div id="group-0" class="panel panel-default panel-dg">
        <div class="panel-heading">
          <h3 class="panel-title">
            Competitors without groups
            <span class="badge"><%= @all_without_group.size %></span>
          </h3>
        </div>
        <div class="panel-groups list-group">
          <div class="search">
            <input class="form-control" type="text" placeholder="Filter people">
            <span class="glyphicon glyphicon-remove-circle"></span>
          </div>
          <div id="without-group" class="list-people" data-group="0">
            <%= render "registrations_as_list", registrations: @all_without_group, event_id: @round.event_id %>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xs-6 col-md-9">
      <div class="row row-all-existing-groups">
        <% @groups.sort.each do |g| %>
          <%= render 'existing_group_panel', group: g %>
          <div class="may-clearfix"></div>
        <% end %>
      </div>
    </div>
  </div>
  <script>
var drake = dragula($(".list-people").toArray(), {
  removeOnSpill: true,
});

let removeGroupForRegistration = function(registration, revertFunc) {
  return ajaxAction(`<%= drop_group_for_round_path(@round.id) %>/${registration}`,
                    revertFunc);
};

let moveTo = function(to, registration_ids, revertFunc) {
  return ajaxAction(`<%= move_to_group_path(@round.id) %>/${to}/${registration_ids.join(",")}`,
                    revertFunc);
};

drake.on('remove', function(el, container, source) {
  // override removeonspill by adding it back to the 'without-group' div
  let $el = $(el);
  $el.removeClass("gu-hide");
  let $prev = $(container);
  let cancelled = false;
  if ($prev.data("group") != "0") {
    let revert = function() {
      $prev.append($el);
    };
    cancelled = !removeGroupForRegistration($el.data("registration"), revert);
  }
  if (!cancelled) {
    $("#without-group").append($el);
    recomputeSizeForGroups([$prev, $("#without-group")]);
  }
}).on('drop', function(el, target, source, sibling) {
  let $el = $(el);
  let $target = $(target);
  let $source = $(source);
  let to = $target.data("group");
  let from = $source.data("group");
  let registration_id = $el.data("registration");
  let revert = function() {
    $source.append($el);
  };
  if (to == from) {
    return;
  } else if (to == "0") {
    removeGroupForRegistration(registration_id, revert);
  } else {
    moveTo(to, [registration_id], revert);
  }
  recomputeSizeForGroups([$target, $source]);
})

sortGroupsBy = function(attr, asc = true) {
  $(".list-people").each(function (index, element) {
    sortCollectionBy($(this).children(), attr, asc).detach().appendTo($(this));
  });
}

$("#sort_name_link").click(function(ev) {
  ev.preventDefault();
  let asc = $(this).hasClass("alpha_desc");

  $(this).toggleClass("alpha_asc", asc);
  $(this).toggleClass("alpha_desc", !asc);

  sortGroupsBy("name", asc);
});

$("#sort_pb_link").click(function(ev) {
  ev.preventDefault();
  let asc = $(this).hasClass("num_desc");

  $(this).toggleClass("num_asc", asc);
  $(this).toggleClass("num_desc", !asc);

  sortGroupsBy("pb", asc);
});

let selectAndMove = function(ev, side, $group) {
  let groupId = $group.data("group");
  ev.preventDefault();
  ev.stopPropagation();
  let $elems = selectNComps(side);
  let ids = $elems.map((_, el) => $(el).data("registration")).get();
  if (ids.length == 0)
    return;
  if (moveTo(groupId, ids, function() {})) {
    $elems.detach().appendTo($group);
    recomputeSizeForGroups([$group, $("#without-group")]);
  }
}

let autoFill = function() {
  let groupSize = $("#group-size").val();
  let availableCompetitors = $("#group-0");
  let allGroups = $($(".list-people").get().reverse());
  allGroups.each(function(index, group) {
    let $group = $(group);
    let groupId = $group.data("group");
    if (groupId == "0")
      return;
    let competitorsInGroup = $group.find(".list-group-item").length;
    let missing = groupSize - competitorsInGroup;
    if (missing <= 0)
      return;
    let $selected = selectNComps("top", missing);
    if ($selected.length <= 0)
      return;
    let ids = $selected.map((_, el) => $(el).data("registration")).get();
    if (moveTo(groupId, ids, function() {})) {
      $selected.detach().appendTo($group);
    }
  });
  recomputeSizeForGroups(allGroups.map((_, el) => $(el)));
}

// Activate onclick for add top/bottom competitors
$(".panel-dg").each(function(index, el) {
  let $pan = $(el);
  let $group = $pan.find(".list-people");
  $pan.find(".add-top").click(function(ev) {
    selectAndMove(ev, "top", $group);
  });
  $pan.find(".add-bottom").click(function(ev) {
    selectAndMove(ev, "bottom", $group);
  });
});

$(".panel-groups").each((index, el) => {
  let $pan = $(el);
  // The clear search icon
  $pan.find(".search > .glyphicon-remove-circle").click(clearSearch);
  // The clear search icon
  $pan.find(".search > input").change(filterRegistrations);
});

  </script>
<% end %>
